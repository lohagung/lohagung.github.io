// Script untuk membuat post di Blogspot dengan isi artikel dari AI Gemini

const axios = require('axios');

const GEMINI_API_KEY = 'AIzaSyAnPO90a0Q2nF4SrxGV07EnGfYh-PQwHyw';
const BLOGGER_API_KEY = 'AIzaSyCVxytTOozO9H3Sv_pQReCYUZ6SWyI_wkQ';
const BLOG_ID = '6550260102335539072';

async function fetchEmptyPosts() {
    try {
        const response = await axios.get(
            `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts?key=${BLOGGER_API_KEY}`
        );

        const emptyPosts = response.data.items.filter(post => !post.content || post.content.trim() === '');
        console.log('Empty posts found:', emptyPosts);
        return emptyPosts;
    } catch (error) {
        console.error('Error fetching posts:', error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        throw error;
    }
}

async function generateArticle(title) {
    try {
        const geminiResponse = await axios.post(
            `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}`,
            {
                contents: [{
                    parts: [{ text: title }]
                }]
            },
            { headers: { 'Content-Type': 'application/json' } }
        );

        console.log('Gemini API full response:', JSON.stringify(geminiResponse.data, null, 2));

        const articleContent = geminiResponse.data.candidates?.[0]?.content?.parts?.[0]?.text;

        if (!articleContent) {
            console.error('No content generated. Full response:', geminiResponse.data);
            throw new Error('No content generated by Gemini AI');
        }

        return articleContent;
    } catch (error) {
        console.error('Error generating article:', error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        throw error;
    }
}

async function updateBlogspotPost(postId, title, content) {
    try {
        const blogspotResponse = await axios.put(
            `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts/${postId}?key=${BLOGGER_API_KEY}`,
            {
                title: title,
                content: content
            },
            { headers: { 'Authorization': `Bearer ${BLOGGER_API_KEY}` } }
        );

        console.log('Blogspot post updated:', blogspotResponse.data);

        return blogspotResponse.data;
    } catch (error) {
        console.error('Error updating Blogspot post:', error.response ? JSON.stringify(error.response.data, null, 2) : error.message);
        throw error;
    }
}

async function fillEmptyPosts() {
    try {
        const emptyPosts = await fetchEmptyPosts();

        for (const post of emptyPosts) {
            console.log('Generating content for:', post.title);
            const content = await generateArticle(post.title);
            await updateBlogspotPost(post.id, post.title, content);
            console.log(`Post "${post.title}" successfully updated.`);
        }
    } catch (error) {
        console.error('Error filling empty posts:', error);
    }
}

// Jalankan untuk mengisi post kosong
fillEmptyPosts();
